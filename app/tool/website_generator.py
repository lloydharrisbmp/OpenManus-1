import os
from pathlib import Path
from typing import Optional, Dict, Any
import json
from jinja2 import Environment, FileSystemLoader, Template

from app.tool.base import BaseTool
from app.tool.file_organizer import file_organizer

class WebsiteGeneratorTool(BaseTool):
    """Tool for generating static websites from content."""

    name: str = "website_generator"
    description: str = "Generates a static website from provided content with modern styling and responsive design"
    parameters: dict = {
        "type": "object",
        "properties": {
            "title": {
                "type": "string",
                "description": "Website title"
            },
            "content": {
                "type": "string",
                "description": "Main content in markdown format"
            },
            "theme": {
                "type": "string",
                "description": "Optional theme name (default: 'modern')"
            },
            "output_dir": {
                "type": "string",
                "description": "Optional output directory name (default: based on title)"
            }
        },
        "required": ["title", "content"]
    }

    def __init__(self):
        super().__init__()
        # Create templates directory if it doesn't exist
        self.templates_dir = Path(__file__).parent / "website_templates"
        if not self.templates_dir.exists():
            self.templates_dir.mkdir(parents=True)
            self._create_default_templates()

    def _create_default_templates(self):
        """Create default website templates."""
        modern_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
        }
        .container {
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            border-radius: 10px;
        }
        h1, h2, h3 {
            color: #2c3e50;
            margin-bottom: 1rem;
        }
        h1 {
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        p {
            margin-bottom: 1.2rem;
        }
        .content {
            padding: 20px;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            text-align: center;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>{{ title }}</h1>
        <div class="content">
            {{ content | safe }}
        </div>
        <div class="footer">
            <p>Generated by OpenManus Financial Planning AI</p>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""
        with open(self.templates_dir / "modern.html", "w") as f:
            f.write(modern_template)

    async def execute(
        self,
        title: str,
        content: str,
        theme: str = "modern",
        output_dir: Optional[str] = None
    ) -> Dict[str, Any]:
        """Generate a static website from the provided content."""
        if not output_dir:
            # Create a URL-friendly directory name from the title
            output_dir = title.lower().replace(" ", "_").replace("/", "_")
        
        # Get the appropriate directory from FileOrganizer
        base_path = file_organizer.get_path("websites", output_dir)
        os.makedirs(base_path, exist_ok=True)

        # Set up Jinja2 environment
        env = Environment(loader=FileSystemLoader(str(self.templates_dir)))
        template = env.get_template(f"{theme}.html")

        # Generate the HTML
        html_content = template.render(
            title=title,
            content=content
        )

        # Write the HTML file
        output_file = base_path / "index.html"
        with open(output_file, "w") as f:
            f.write(html_content)

        return {
            "status": "success",
            "message": f"Website generated successfully at {output_file}",
            "output_dir": str(base_path),
            "index_file": str(output_file)
        } 